{"version":3,"sources":["pages/private/setting/suppliers/index.tsx","services/supplier.service.tsx"],"names":["useStyles","makeStyles","container","width","maxHeight","Suppliers","t","useTranslation","classes","useState","isFirstLoad","isLoading","data","state","setState","useEffect","a","apiGetAllSuppliers","console","log","prevState","fetchApi","handleRowChange","row","rowIndex","apiPutSupplier","active","map","d","i","className","stickyHeader","aria-label","align","key","name","component","scope","checked","onChange","params","callApi","url","API_ROOT","API_MODULES","res","method","apiGetKeySupplierNews","apiGetThirdRiskManagements"],"mappings":"iNAgBMA,EAAYC,YAAW,CAC3BC,UAAW,CACTC,MAAO,MACPC,UAAW,OA0FAC,UAtFG,WAAO,IACfC,EAAMC,cAAND,EACFE,EAAUR,IAFM,EAGIS,mBAAS,CACjCC,aAAa,EACbC,WAAW,EACXC,KAAM,KANc,mBAGfC,EAHe,KAGRC,EAHQ,KAStBC,qBAAU,YACM,uCAAG,4BAAAC,EAAA,6DACXJ,EAAY,GADD,kBAGAK,cAHA,OAGbL,EAHa,uDAKbM,QAAQC,IAAI,0CAAZ,MALa,QAQfL,GAAS,SAACM,GAAD,mBAAC,eACLA,GADI,IAEPT,WAAW,EACXD,aAAa,EACbE,YAZa,yDAAH,qDAgBdS,KACC,IAEH,IAAMC,EAAe,uCAAG,WAAOC,EAAUC,GAAjB,SAAAR,EAAA,6DACtBF,GAAS,SAACM,GAAD,mBAAC,eACLA,GADI,IAEPT,WAAW,OAHS,kBAOdc,YAAe,2BAAKF,GAAN,IAAWG,OAAuB,IAAfH,EAAIG,OAAe,EAAI,KAP1C,OASpBZ,GAAS,SAACM,GAAD,mBAAC,eACLA,GADI,IAEPT,WAAW,EACXC,KAAMC,EAAMD,KAAKe,KAAI,SAACC,EAAQC,GAAT,OACnBL,IAAaK,EAAb,2BAAsBD,GAAtB,IAAyBF,OAAqB,IAAbE,EAAEF,OAAe,EAAI,IAAME,UAb5C,gDAiBpBd,GAAS,SAACM,GAAD,mBAAC,eACLA,GADI,IAEPT,WAAW,OAGbO,QAAQC,IAAI,iDAAZ,MAtBoB,yDAAH,wDA0BrB,OACE,oCACE,kBAAC,IAAD,CAAgBW,UAAWtB,EAAQN,WACjC,kBAAC,IAAD,CAAO6B,cAAY,EAACC,aAAW,gBAC7B,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAY1B,EAAE,SACd,kBAAC,IAAD,CAAW2B,MAAM,SAAS3B,EAAE,WAGhC,kBAAC,IAAD,KACGO,EAAMD,KAAKe,KAAI,SAACJ,EAAUM,GAAX,OACd,kBAAC,IAAD,CAAUK,IAAKX,EAAIY,MACjB,kBAAC,IAAD,CAAWC,UAAU,KAAKC,MAAM,OAC7Bd,EAAIY,MAEP,kBAAC,IAAD,CAAWF,MAAM,SACf,kBAAC,IAAD,CACEK,UAAWf,EAAIG,OACfa,SAAU,kBAAMjB,EAAgBC,EAAKM,iB,wNC7FlD,SAAeZ,IAAtB,+B,4CAAO,0CAAAD,EAAA,6DAAkCwB,EAAlC,+BAAgD,GAAhD,SACkBC,YAAQ,CAC7BC,IAAI,GAAD,OAAKC,IAAL,YAAiBC,IAAYvC,WAChCmC,WAHG,cACCK,EADD,yBAMEA,EAAIjC,MANN,4C,sBASA,SAAea,IAAtB,+B,4CAAO,0CAAAT,EAAA,6DAA8BJ,EAA9B,+BAA0C,GAA1C,SACkB6B,YAAQ,CAC7BK,OAAQ,MACRJ,IAAI,GAAD,OAAKC,IAAL,YAAiBC,IAAYvC,WAChCO,SAJG,cACCiC,EADD,yBAOEA,EAAIjC,MAPN,4C,sBAUA,SAAemC,IAAtB,+B,4CAAO,0CAAA/B,EAAA,6DAAqCwB,EAArC,+BAAmD,GAAnD,SACkBC,YAAQ,CAC7BC,IAAI,GAAD,OAAKC,IAAL,sBACHH,WAHG,cACCK,EADD,yBAMEA,EAAIjC,MANN,4C,sBASA,SAAeoC,IAAtB,+B,4CAAO,0CAAAhC,EAAA,6DAA0CJ,EAA1C,+BAAsD,GAAtD,SACkB6B,YAAQ,CAC7BK,OAAQ,OACRJ,IAAI,GAAD,OAAKC,IAAL,iBAAsBC,IAAYvC,WACrCO,SAJG,cACCiC,EADD,yBAOEA,EAAIjC,MAPN,4C","file":"static/js/11.2cc2221c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport {\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"components/ui-libraries\";\n\nimport { apiGetAllSuppliers, apiPutSupplier } from \"services/supplier.service\";\n\nconst useStyles = makeStyles({\n  container: {\n    width: \"30%\",\n    maxHeight: 440,\n  },\n});\n\nconst Suppliers = () => {\n  const { t } = useTranslation();\n  const classes = useStyles();\n  const [state, setState] = useState({\n    isFirstLoad: true,\n    isLoading: true,\n    data: [],\n  });\n\n  useEffect(() => {\n    const fetchApi = async () => {\n      let data: any = [];\n      try {\n        data = await apiGetAllSuppliers();\n      } catch (e) {\n        console.log(\"Nguyen C: index.tsx, F: fetchApi, N: e \", e);\n      }\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isFirstLoad: false,\n        data,\n      }));\n    };\n\n    fetchApi();\n  }, []);\n\n  const handleRowChange = async (row: any, rowIndex: number) => {\n    setState((prevState) => ({\n      ...prevState,\n      isLoading: true,\n    }));\n\n    try {\n      await apiPutSupplier({ ...row, active: row.active === 1 ? 0 : 1 });\n\n      setState((prevState: any) => ({\n        ...prevState,\n        isLoading: false,\n        data: state.data.map((d: any, i: number) =>\n          rowIndex === i ? { ...d, active: d.active === 1 ? 0 : 1 } : d\n        ),\n      }));\n    } catch (e) {\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n      }));\n\n      console.log(\"Nguyen C: index.tsx, F: handleRowChange, N: e \", e);\n    }\n  };\n\n  return (\n    <>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>{t(\"name\")}</TableCell>\n              <TableCell align=\"right\">{t(\"show\")}</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {state.data.map((row: any, i: number) => (\n              <TableRow key={row.name}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </TableCell>\n                <TableCell align=\"right\">\n                  <Checkbox\n                    checked={!!row.active}\n                    onChange={() => handleRowChange(row, i)}\n                  />\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default Suppliers;\n","import { callApi } from \"utils/service.util\";\n\nimport { API_MODULES, API_ROOT } from \"constants/common\";\n\nexport async function apiGetAllSuppliers(params: any = {}) {\n  const res: any = await callApi({\n    url: `${API_ROOT}/${API_MODULES.Suppliers}`,\n    params,\n  });\n\n  return res.data;\n}\n\nexport async function apiPutSupplier(data: any = {}) {\n  const res: any = await callApi({\n    method: \"PUT\",\n    url: `${API_ROOT}/${API_MODULES.Suppliers}`,\n    data,\n  });\n\n  return res.data;\n}\n\nexport async function apiGetKeySupplierNews(params: any = {}) {\n  const res: any = await callApi({\n    url: `${API_ROOT}/news/breakingnews`,\n    params,\n  });\n\n  return res.data;\n}\n\nexport async function apiGetThirdRiskManagements(data: any = {}) {\n  const res: any = await callApi({\n    method: \"POST\",\n    url: `${API_ROOT}/news/${API_MODULES.Suppliers}`,\n    data,\n  });\n\n  return res.data;\n}\n"],"sourceRoot":""}